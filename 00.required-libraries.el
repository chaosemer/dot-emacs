;;; init/00.required-libraries.el --- Misc utilities useful for init files  -*- lexical-binding: t; -*-

;;; Code:

;; Allow me to declaratively hook things, automatically removing the hook when redefined.
(defmacro hook-mode (hook &rest modes)
  "Hook each member of MODES on HOOK.
If the member is a symbol, call (member 1); if it is a list, just
execute it directly.  This allows you to declaratively hook in
minor modes on a major mode."
  (declare (indent 1))
  (let ((body (cl-loop for expr in modes
                       if (and (symbolp expr) (fboundp expr))
                         collect (list expr 1)
                       else if (listp expr)
                         collect expr
                       else do (error "%s does not appear to name a minor mode" expr))))
    `(hook-mode-attach ',hook (lambda () "Auto-generated by `hook-mode'"
                                ,@body))))

(defvar hook-mode-*hooks* (make-hash-table :test #'eq))
(defun hook-mode-attach (hook function)
  "Attach FUNCTION to HOOK."
  (when (gethash hook hook-mode-*hooks*)
    (remove-hook hook (gethash hook hook-mode-*hooks*)))
  (add-hook hook function)
  (setf (gethash hook hook-mode-*hooks*) function))
